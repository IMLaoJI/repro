TypedBinaryEncoder {
  types = typeDef? (space+ typeDef)*

  typeDef = "type" space assignment
  assignment = identifier ":" space type
  identifier = letter alnum+

  type =
    | numberType
    | charType
    | stringType
    | booleanType
    | enumType
    | arrayType
    | vectorType
    | mapType
    | structType
    | unionType
    | aliasType

  numberType =
    | "int8"
    | "uint8"
    | "int16"
    | "uint16"
    | "int32"
    | "uint32"

  charType = "char[" digit+ "]"
  stringType = "string"
  booleanType = "bool"

  enumType = "enum {" spaces (enumProperty space+)* spaces "}"
  enumProperty = enumPropertyName ":" space enumPropertyValue
  enumPropertyName = identifier
  enumPropertyValue = digit+

  arrayType = "array[" digit+ "]<" fixedPrimitiveType ">"
  vectorType = "vector<" type ">"

  mapType = "map<" mapKeyType ", " type ">"
  mapKeyType = charType | stringType

  structType = "struct {" spaces (assignment space+)* spaces "}"

  unionType = "union on \"" unionTagField "\" {" spaces (identifier space+)* spaces "}"
  unionTagField = identifier

  fixedPrimitiveType = numberType | charType | booleanType
  aliasType = letter alnum+
}
